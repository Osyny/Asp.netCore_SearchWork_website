// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Search_Work.Data;
using System;

namespace Search_Work.Data.Migrations
{
    [DbContext(typeof(oxana1404))]
    [Migration("20181013171915_AddNewTables")]
    partial class AddNewTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Search_Work.Models.AditinalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ResumeId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique()
                        .HasFilter("[ResumeId] IS NOT NULL");

                    b.ToTable("AditinalInfos");
                });

            modelBuilder.Entity("Search_Work.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<Guid?>("EmployerId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployerId")
                        .IsUnique()
                        .HasFilter("[EmployerId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountUserId");

                    b.Property<string>("ApartmentNumber");

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("Birthday");

                    b.Property<Guid?>("ChildrenId");

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<Guid?>("FamilyStatusId");

                    b.Property<string>("LastName");

                    b.Property<string>("Linkedin");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Region");

                    b.Property<string>("Sex");

                    b.Property<string>("Skype");

                    b.Property<string>("Street");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId")
                        .IsUnique()
                        .HasFilter("[AccountUserId] IS NOT NULL");

                    b.HasIndex("ChildrenId");

                    b.HasIndex("CityId");

                    b.HasIndex("FamilyStatusId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<Guid?>("CityId");

                    b.Property<string>("CompanyLogoUrl")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Requirements");

                    b.Property<string>("Site");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.Property<Guid>("ResumeId");

                    b.Property<string>("SiteUrlEdition");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Children", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Childrens");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("DateWorkFrom");

                    b.Property<DateTime>("DateWorkTo");

                    b.Property<Guid>("FormTrainingId");

                    b.Property<Guid>("LevelEducationId");

                    b.Property<string>("NameInstitution");

                    b.Property<Guid>("ResumeId");

                    b.Property<string>("Specialization");

                    b.HasKey("Id");

                    b.HasIndex("FormTrainingId");

                    b.HasIndex("LevelEducationId");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.EmploymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateWorkFrom");

                    b.Property<DateTime>("DateWorkTo");

                    b.Property<Guid>("EmploymentId");

                    b.Property<bool>("IsWorkingNow");

                    b.Property<string>("NameOrganization");

                    b.Property<string>("Position");

                    b.Property<string>("Progres");

                    b.Property<Guid>("ResumeId");

                    b.Property<string>("Task");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ResumeId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.FamilyStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FamilyStatuses");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.FieldActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FieldActivities");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.FieldActivityResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FieldActivityId");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("FieldActivityId");

                    b.HasIndex("ResumeId");

                    b.ToTable("FieldsActivityResume");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ForeignLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LevelLanguageId");

                    b.Property<string>("Name");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("LevelLanguageId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ForeignLanguages");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.FormTraining", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FormTrainings");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ImplementedProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateWorkFrom");

                    b.Property<DateTime>("DateWorkTo");

                    b.Property<string>("LinkToProgect");

                    b.Property<string>("NameProgect");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ImplementedProjects");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.LevelEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LevelEducations");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.LevelLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LevelLanguages");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.LevelTechnologyPossession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LevelTechnologyPossessions");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.PaternSearchResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("City");

                    b.Property<Guid>("Education");

                    b.Property<Guid>("Employment");

                    b.Property<Guid>("ExperienceOfWork");

                    b.Property<Guid>("FieldActivity");

                    b.Property<bool>("IsInName");

                    b.Property<bool>("IsLiteTestPassed");

                    b.Property<string>("Request");

                    b.Property<int>("Salary");

                    b.HasKey("Id");

                    b.ToTable("PaternSearchResumes");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.Property<Guid>("ResumeId");

                    b.Property<string>("SiteEdition");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.RecommendedVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CandidateId");

                    b.Property<DateTime>("DateSaved");

                    b.Property<Guid>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VacancyId");

                    b.ToTable("RecommendedVacancies");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ResponseToResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataResponse");

                    b.Property<Guid?>("ResponseTypeToResumeId");

                    b.Property<Guid>("ResumeId");

                    b.Property<Guid>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseTypeToResumeId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("ResponsesToResume");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ResponseToVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CandidateId");

                    b.Property<DateTime>("DataResponse");

                    b.Property<Guid?>("ResponseTypeId");

                    b.Property<Guid>("ResumeId");

                    b.Property<Guid>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ResponseTypeId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("ResponsesToVacancy");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ResponseTypeToResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResponsesTypeToResume");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CandidateId");

                    b.Property<DateTime>("DateChange");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Description");

                    b.Property<string>("Foto");

                    b.Property<string>("Name");

                    b.Property<string>("Position");

                    b.Property<int>("Salary");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SavedResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateSaved");

                    b.Property<Guid>("EmployerId");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ResumeId");

                    b.ToTable("SavedResumes");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SavedVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CandidateId");

                    b.Property<DateTime>("DateSaved");

                    b.Property<Guid>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VacancyId");

                    b.ToTable("SavedVacancies");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ShowResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ShowsResume");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SoftWare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LevelTechnologyPossessionId");

                    b.Property<string>("Name");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("LevelTechnologyPossessionId");

                    b.HasIndex("ResumeId");

                    b.ToTable("SoftWares");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.TrainingAndCource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("Name");

                    b.Property<int>("NumberCertification");

                    b.Property<Guid>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("TrainingAndCources");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ViewPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataView");

                    b.Property<Guid?>("EmployerId");

                    b.Property<Guid>("ResumeId");

                    b.Property<Guid?>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("ViewsPages");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Vacancies.ExperienceOfWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameField");

                    b.HasKey("Id");

                    b.ToTable("ExperienceOfWorks");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Vacancies.PaternSearchVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("City");

                    b.Property<Guid>("Employment");

                    b.Property<Guid>("ExperienceOfWork");

                    b.Property<Guid>("FieldActivity");

                    b.Property<string>("Request");

                    b.Property<int>("Salary");

                    b.HasKey("Id");

                    b.ToTable("PaternSearchVacancies");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Vacancies.ResponseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ResponsesType");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalRequirements");

                    b.Property<Guid>("CityId");

                    b.Property<string>("ContactNamePerson");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Description");

                    b.Property<string>("EmailPerson");

                    b.Property<Guid>("EmployerId");

                    b.Property<Guid>("ExperienceOfWorkId");

                    b.Property<string>("Facebook");

                    b.Property<Guid>("FieldActivityId");

                    b.Property<string>("ForeignLanguages");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsUseCompanyContact");

                    b.Property<bool>("IsUsePersonalContact");

                    b.Property<string>("Linkedin");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumberPerson");

                    b.Property<string>("Requirement");

                    b.Property<string>("Responsibilities");

                    b.Property<string>("Site");

                    b.Property<Guid>("TypeEmploymentId");

                    b.Property<int>("Wage");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("ExperienceOfWorkId");

                    b.HasIndex("FieldActivityId");

                    b.HasIndex("TypeEmploymentId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Search_Work.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Search_Work.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Search_Work.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.AditinalInfo", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithOne("AditinalInfo")
                        .HasForeignKey("Search_Work.Models.AditinalInfo", "ResumeId");
                });

            modelBuilder.Entity("Search_Work.Models.ApplicationUser", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Employer", "Employer")
                        .WithOne("AccountUser")
                        .HasForeignKey("Search_Work.Models.ApplicationUser", "EmployerId");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Candidate", b =>
                {
                    b.HasOne("Search_Work.Models.ApplicationUser", "AccountUser")
                        .WithOne("Candidate")
                        .HasForeignKey("Search_Work.Models.ArreaDatabase.Candidate", "AccountUserId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Children", "Children")
                        .WithMany()
                        .HasForeignKey("ChildrenId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.City", "City")
                        .WithMany("Candidates")
                        .HasForeignKey("CityId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.FamilyStatus", "FamilyStatus")
                        .WithMany("Candidates")
                        .HasForeignKey("FamilyStatusId");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Company", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Employer", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Company", "Company")
                        .WithMany("Employers")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Award", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("Awards")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Education", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.FormTraining", "FormTraining")
                        .WithMany("Educations")
                        .HasForeignKey("FormTrainingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.LevelEducation", "LevelEducation")
                        .WithMany()
                        .HasForeignKey("LevelEducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Experience", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.EmploymentType", "Employment")
                        .WithMany("Experiences")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("Experiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.FieldActivityResume", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.FieldActivity", "FieldActivity")
                        .WithMany("Resumes")
                        .HasForeignKey("FieldActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("FieldActivities")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ForeignLanguage", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.LevelLanguage", "LevelLanguage")
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("LevelLanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ImplementedProject", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("ImplementedProjects")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Publication", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("Publications")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.RecommendedVacancy", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Candidate", "Candidate")
                        .WithMany("RecommendedVacancies")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", "Vacancy")
                        .WithMany("RecommendedVacancies")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ResponseToResume", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.ResponseTypeToResume", "ResponseTypeToResume")
                        .WithMany("Resumes")
                        .HasForeignKey("ResponseTypeToResumeId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", "Vacancy")
                        .WithMany("Responses")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ResponseToVacancy", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Candidate")
                        .WithMany("ResponsesToVacancy")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.ResponseType", "ResponseType")
                        .WithMany("Responses")
                        .HasForeignKey("ResponseTypeId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("Responses")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", "Vacancy")
                        .WithMany("ResponsesVacansy")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.Resume", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Candidate", "Candidate")
                        .WithMany("Resumes")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SavedResume", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("SavedResumes")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SavedVacancy", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Candidate", "Candidate")
                        .WithMany("SavedVacancies")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", "Vacancy")
                        .WithMany("SavedVacancies")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ShowResume", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("ShowsResume")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.SoftWare", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.LevelTechnologyPossession", "LevelTechnologyPossession")
                        .WithMany("SoftWares")
                        .HasForeignKey("LevelTechnologyPossessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("SoftWares")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.TrainingAndCource", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("TrainingAndCources")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Resumes.ViewPage", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.Resume", "Resume")
                        .WithMany("ViewsPage")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", "Vacancy")
                        .WithMany("PageViews")
                        .HasForeignKey("VacancyId");
                });

            modelBuilder.Entity("Search_Work.Models.ArreaDatabase.Vacancies.Vacancy", b =>
                {
                    b.HasOne("Search_Work.Models.ArreaDatabase.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Vacancies.ExperienceOfWork", "ExperienceOfWork")
                        .WithMany("Vacancies")
                        .HasForeignKey("ExperienceOfWorkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.FieldActivity", "FieldActivity")
                        .WithMany("Vacancies")
                        .HasForeignKey("FieldActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Search_Work.Models.ArreaDatabase.Resumes.EmploymentType", "TypeEmployment")
                        .WithMany("Vacancies")
                        .HasForeignKey("TypeEmploymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
